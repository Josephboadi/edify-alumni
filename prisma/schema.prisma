// prisma/schema.prisma

// datasource db {
//   provider = "mysql"
//   url     
// = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  user_id       String     @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phoneNumber       String?
  country       String?
  school        String?
  year          String?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Menu {
  id          Int      @id @default(autoincrement())
  menuTitle        String
  path        String?
  icon        String
  position        Int 
  status        Int @default(1)
  component        String?
  isParent      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parents   MenuHierarchy[] @relation("Parent")
  childs   MenuHierarchy[] @relation("Descendant")
  parent_id Int? 
  parent   Menu?    @relation("Children", fields: [parent_id], references: [id])
  children Menu[]   @relation("Children")
}

model MenuHierarchy {
  //  id          String  @id @default(cuid())
  parent_id   Int
  child_id Int
  parent     Menu @relation("Parent", fields: [parent_id], references: [id], onDelete: Cascade)
  child   Menu @relation("Descendant", fields: [child_id], references: [id], onDelete: Cascade)
  @@id([parent_id, child_id])
}

model RoleMenu {
  id          Int      @id @default(autoincrement())
  menuTitle        String
  role        String
  path        String?
  icon        String
  position        Int 
  status        Int @default(1)
  component        String?
  isParent      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parents   RoleMenuHierarchy[] @relation("Parent")
  childs   RoleMenuHierarchy[] @relation("Descendant")
  parent_id Int? 
  parent   RoleMenu?    @relation("Children", fields: [parent_id], references: [id])
  children RoleMenu[]   @relation("Children")
}

model RoleMenuHierarchy {
  //  id          String  @id @default(cuid())
  parent_id   Int
  child_id Int
  parent     RoleMenu @relation("Parent", fields: [parent_id], references: [id], onDelete: Cascade)
  child   RoleMenu @relation("Descendant", fields: [child_id], references: [id], onDelete: Cascade)
  @@id([parent_id, child_id])
}


model Permission {
  id String @id @default(cuid())
  permission Int
  action String 
  controller Int
  actionName String 
  controllerName String
  position Int
  status Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Form {
  id          Int      @id @default(autoincrement())
  userId      String
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  content     String   @default("[]")

  visits      Int @default(0)
  submissions Int @default(0)

  shareURL        String            @unique @default(uuid())
  FormSubmissions FormSubmissions[]

  @@unique([name, userId])
}

model FormSubmissions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])

  content String
}